{"version":3,"file":"0.5df9cc310f64ac1ac627.hot-update.js","sources":["webpack:///src/Editor/RichEditor.js"],"sourcesContent":["import React, { Component } from 'react';\n//import 'draft-js/dist/Draft.css';\nimport { Map } from 'immutable';\nimport Draft, {Editor, EditorState, RichUtils, convertToRaw, convertFromRaw, Modifier } from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport InlineStyleControls from './InlineStyleControls';\nimport BlockStyleControls from './BlockStyleControls';\nimport { getBlockStyle } from './BlockStyleFn';\nimport { STATE, STYLE_MAP } from './constants';\n\n\nclass RichEditor extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createWithContent(convertFromRaw(STATE))};\n  }\n\n  focus = () => {\n    this.refs.editor.focus();\n  };\n\n  fetch = () => {\n      console.log(this.refs.editor.editor.innerHTML)\n  }\n\n  onChange = (editorState) => {\n    this.setState({editorState});\n  };\n\n\n  handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  };\n\n  onTab = (e) => {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  };\n\n  toggleBlockType = (blockType) => {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  };\n\n  getRawContent = () => {\n      const raw = convertToRaw(this.state.editorState.getCurrentContent());\n      console.log(JSON.stringify(raw));\n  }\n\n  toggleInlineStyle = (inlineStyle) => {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  };\n\n    insertText = () => {\n        const selection = this.state.editorState.getSelection();\n        const contentState = this.state.editorState.getCurrentContent();\n        const ncs = Modifier.insertText(contentState, selection, \"[znacznik]\");\n        const es = EditorState.push(this.state.editorState, ncs, 'insert-fragment');\n        this.setState({editorState: es});\n    }\n\n  render() {\n      const TOHTML_OPTIONS = {\n          // blockRenderers: {\n          //     'center': (block) => {\n          //         console.log(block);\n          //         return null;\n          //     },\n          // },\n          // defaultBlockTag: 'center',\n          inlineStyles: {\n              // Override default element (`strong`).\n              BOLD: {element: 'strong'},\n              ITALIC: {element: 'i'},\n          },\n      };\n\n      const blockRenderMap = Map({\n          'center': {\n              element: 'center'\n          },\n          'header-one': {\n              element: 'h3'\n          }\n      });\n      const extendedBlockRenderMap = Draft.DefaultDraftBlockRenderMap.merge(blockRenderMap);\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = this.state.editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n    console.log(convertToRaw(this.state.editorState.getCurrentContent()));\n    //console.log(extendedBlockRenderMap);\n    return (\n      <div>\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            editorState={this.state.editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            onTab={this.onTab}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n            blockRenderMap={extendedBlockRenderMap}\n            customStyleMap={STYLE_MAP}\n          />\n        </div>\n        <div>\n        </div>\n      </div>\n          { stateToHTML(this.state.editorState.getCurrentContent(), TOHTML_OPTIONS) }\n          <div className=\"reTextCenter\">\n            <button onClick={this.fetch}>html</button>\n            <button onClick={this.getRawContent}>html</button>\n            <button onClick={this.insertText}>insert</button>\n          </div>\n      </div>\n    );\n  }\n}\n\nRichEditor.propTypes = {};\n\nexport default RichEditor;\n\n\n\n// WEBPACK FOOTER //\n// src/Editor/RichEditor.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AAMA;AACA;AACA;AARA;AAUA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAhBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;AACA;AACA;AACA;AA/BA;AAiCA;AAMA;AACA;AAxCA;AA0CA;AACA;AACA;AACA;AA7CA;AA+CA;AAMA;AACA;AAtDA;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAFA;AAGA;AACA;;;AA2DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AARA;AACA;AAcA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AA0BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AA5BA;AAmCA;;;;AAzIA;AACA;AA2IA;AACA;AACA;;;;A","sourceRoot":""}