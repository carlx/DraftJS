{"version":3,"file":"0.bbce39d27db71b76a0c5.hot-update.js","sources":["webpack:///src/Editor/BlockStyleControls.js","webpack:///src/Editor/BlockStyleFn.js","webpack:///src/Editor/InlineStyleControls.js","webpack:///src/Editor/RichEditor.js","webpack:///src/Editor/StyleButton.js","webpack:///src/Editor/constants.js","webpack:///src/Home.js"],"sourcesContent":["import React from 'react';\nimport StyleButton from './StyleButton';\nimport { BLOCK_TYPES } from './constants';\n\nexport const BlockStyleControls = (props) => {\n    const {editorState} = props;\n    const selection = editorState.getSelection();\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType();\n    return (\n        <div className=\"RichEditor-controls\">\n            {BLOCK_TYPES.map((type) =>\n                <StyleButton\n                    key={type.label}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BlockStyleControls;\n\n\n// WEBPACK FOOTER //\n// src/Editor/BlockStyleControls.js","export function getBlockStyle(block) {\n    console.log(block.getType());\n    switch (block.getType()) {\n        case 'blockquote': return 'RichEditor-blockquote';\n        case 'super': return 'reTextCenter';\n        default: return null;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// src/Editor/BlockStyleFn.js","import React from 'react';\nimport StyleButton from './StyleButton';\nimport { INLINE_STYLES } from './constants';\n\nexport const InlineStyleControls = (props) => {\n    var currentStyle = props.editorState.getCurrentInlineStyle();\n    return (\n        <div className=\"RichEditor-controls\">\n            {INLINE_STYLES.map(type =>\n                <StyleButton\n                    key={type.label}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default InlineStyleControls;\n\n\n// WEBPACK FOOTER //\n// src/Editor/InlineStyleControls.js","import React, { Component } from 'react';\nimport 'draft-js/dist/Draft.css';\nimport Draft, {Editor, EditorState, RichUtils } from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport InlineStyleControls from './InlineStyleControls';\nimport BlockStyleControls from './BlockStyleControls';\nimport { getBlockStyle } from './BlockStyleFn';\n\n\n\nclass RichEditor extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n  }\n\n  focus = () => {\n    this.refs.editor.focus();\n  };\n\n  onChange = (editorState) => {\n    this.setState({editorState});\n  };\n\n\n  handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  };\n\n  onTab = (e) => {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  };\n\n  toggleBlockType = (blockType) => {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  };\n\n  toggleInlineStyle = (inlineStyle) => {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  };\n\n  render() {\n      const TOHTML_OPTIONS = {\n      };\n    const {editorState} = this.state;\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n    return (\n      <div>\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            editorState={this.state.editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            onTab={this.onTab}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n            //blockStyleFn={myBlockStyleFn}\n          />\n        </div>\n        <div>\n        </div>\n      </div>\n          {/*{ stateToHTML(editorState.getCurrentContent()) }*/}\n      </div>\n    );\n  }\n}\n\nRichEditor.propTypes = {};\n\nexport default RichEditor;\n\n\n\n// WEBPACK FOOTER //\n// src/Editor/RichEditor.js","import React from 'react';\n\nexport class StyleButton extends React.Component {\n    constructor() {\n        super();\n        this.onToggle = (e) => {\n            e.preventDefault();\n            this.props.onToggle(this.props.style);\n        };\n    }\n    render() {\n        let className = 'RichEditor-styleButton';\n        if (this.props.active) {\n            className += ' RichEditor-activeButton';\n        }\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n              {this.props.label}\n            </span>\n        );\n    }\n}\n\nexport default StyleButton;\n\n\n// WEBPACK FOOTER //\n// src/Editor/StyleButton.js","export const BLOCK_TYPES = [\n    {label: 'Tytu≈Ç', style: 'header-one'},\n    {label: 'H2', style: 'header-two'},\n    {label: 'H3', style: 'header-three'},\n    {label: 'H4', style: 'header-four'},\n    {label: 'H5', style: 'header-five'},\n    {label: 'H6', style: 'header-six'},\n    {label: 'Blockquote', style: 'blockquote'},\n    {label: 'CENTER', style: 'super'},\n    {label: 'UL', style: 'unordered-list-item'},\n    {label: 'OL', style: 'ordered-list-item'},\n    {label: 'Code Block', style: 'code-block'},\n];\n\nexport const INLINE_STYLES = [\n    {label: 'Bold', style: 'BOLD'},\n    {label: 'Italic', style: 'ITALIC'},\n    {label: 'Underline', style: 'UNDERLINE'},\n    {label: 'Monospace', style: 'CODE'},\n    {label: 'Center', style: 'center'},\n];\n\n\n// WEBPACK FOOTER //\n// src/Editor/constants.js","import React, { Component } from 'react';\nimport logo from './react.svg';\nimport styles from './Home.module.css';\nimport './Home.css';\nimport RichEditor from './Editor/RichEditor';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className={styles.home}>\n        <RichEditor />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n\n\n\n// WEBPACK FOOTER //\n// src/Home.js"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAYA;AACA;AACA;;;;;;;;AC1BA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAKA;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AAMA;AACA;AACA;AARA;AAUA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AA3BA;AA6BA;AAMA;AACA;AApCA;AAsCA;AAMA;AACA;AA3CA;AAFA;AAGA;AACA;;;AA0CA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AADA;AA6BA;;;;AA3FA;AACA;AA6FA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AARA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAlBA;AACA;AADA;AAAA;AACA;AAoBA;;;;;;;;ACvBA;AAAA;AAAA;AACA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;;;;AAPA;AACA;AASA;;;;;;;A","sourceRoot":""}