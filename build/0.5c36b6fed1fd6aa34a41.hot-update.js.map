{"version":3,"file":"0.5c36b6fed1fd6aa34a41.hot-update.js","sources":["webpack:///src/Editor/RichEditor.js"],"sourcesContent":["import React, { Component } from 'react';\n//import 'draft-js/dist/Draft.css';\nimport { Map } from 'immutable';\nimport Draft, {Editor, EditorState, RichUtils, convertToRaw } from 'draft-js';\nimport {stateToHTML} from 'draft-js-export-html';\nimport InlineStyleControls from './InlineStyleControls';\nimport BlockStyleControls from './BlockStyleControls';\nimport { getBlockStyle } from './BlockStyleFn';\n\n\n\nclass RichEditor extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n  }\n\n  focus = () => {\n    this.refs.editor.focus();\n  };\n\n  onChange = (editorState) => {\n    this.setState({editorState});\n  };\n\n\n  handleKeyCommand = (command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  };\n\n  onTab = (e) => {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  };\n\n  toggleBlockType = (blockType) => {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  };\n\n  toggleInlineStyle = (inlineStyle) => {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  };\n\n  render() {\n      const TOHTML_OPTIONS = {\n          blockRenderers: {\n              'header-one': (block) => {\n                  console.log(block);\n                  return '<div style=\"text-align: center;\">dupa</div>';\n              },\n          },\n      };\n\n      const blockRenderMap = Map({\n          'center': {\n              element: 'center'\n          },\n          'unstyled': {\n              element: 'section'\n          }\n      });\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = this.state.editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n    console.log(convertToRaw(this.state.editorState.getCurrentContent()));\n    return (\n      <div>\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={this.state.editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            editorState={this.state.editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            onTab={this.onTab}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n            blockRenderMap={blockRenderMap}\n            //blockStyleFn={myBlockStyleFn}\n          />\n        </div>\n        <div>\n        </div>\n      </div>\n          { stateToHTML(this.state.editorState.getCurrentContent(), TOHTML_OPTIONS) }\n          <div className=\"reTextCenter\">\n            Hello\n          </div>\n      </div>\n    );\n  }\n}\n\nRichEditor.propTypes = {};\n\nexport default RichEditor;\n\n\n\n// WEBPACK FOOTER //\n// src/Editor/RichEditor.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AAMA;AACA;AACA;AARA;AAUA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AA3BA;AA6BA;AAMA;AACA;AApCA;AAsCA;AAMA;AACA;AA3CA;AAFA;AAGA;AACA;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAQA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AA0BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AAiCA;;;;AA9GA;AACA;AAgHA;AACA;AACA;;;;A","sourceRoot":""}